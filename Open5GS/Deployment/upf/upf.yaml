apiVersion: v1
kind: Service
metadata:
  name: open5gs-upf-1
  namespace: cemenin
  labels:
    epc-mode: upf1
    promotheus: open5gs-monitor
spec:
  selector:
    epc-mode: upf1
  ports:
    - name: http2-open5gs-upf1-80
      protocol: TCP
      port: 80
      targetPort: 80
    - name: http-open5gs-upf1-9090
      protocol: TCP
      port: 9090
      targetPort: 9090
    - name: open5gs-upf1-udp-2152
      protocol: UDP
      port: 2152
      targetPort: 2152
    - name: open5gs-upf1-udp-8805
      protocol: UDP
      port: 8805
      targetPort: 8805
    # - name: http-open5gs-upf1-9100
    #   protocol: TCP
    #   port: 9100
    #   targetPort: 9100
---
apiVersion: apps/v1 # for versions before 1.9.0 use apps/v1beta2
kind: Deployment
metadata:
  name: open5gs-upf-1
  namespace: cemenin
  labels:
    epc-mode: upf1
    promotheus: open5gs-monitor
spec:
  replicas: 1
  selector:
    matchLabels:
      epc-mode: upf1
  template:
    metadata:
      labels:
        epc-mode: upf1
        app: open5gs-upf
        prometheus: open5gs-monitor
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
        kubernetes.io/hostname: petshopboys
      containers:
        # - name: tcpdump-upf1
        #   image: maikovisky/open5gs:2.6.4
        #   imagePullPolicy: Always
        #   command: ["/bin/tcpdump", "-i", "eth0", "-s", "65535", "-G", "3600", "-w", "/var/tcpdump/upf1-%F_%H%M.pcap"]
        #   volumeMounts:
        #     - name: "dev-net-tun"
        #       mountPath: "/dev/net/tun" # Needed for VPN
        #     - name: tcpdump-persistent-storage
        #       mountPath: /var/tcpdump

        - name: upf1
          image: maikovisky/open5gs:2.6.4
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add: ["NET_ADMIN", "SYS_MODULE"]

          volumeMounts:
            - name: open5gs-upf1-config
              mountPath: /open5gs/config-map/upf.yaml
              subPath: "upf.yaml"

            - name: "dev-net-tun"
              mountPath: "/dev/net/tun" # Needed for VPN

            - name: open5gs-upf1-config
              mountPath: /bin/entrypoint.sh
              subPath: entrypoint.sh

          #command: ["open5gs-upfd", "-c", "/open5gs/config-map/upf.yaml"]
          command: ["/bin/entrypoint.sh"]

      volumes:
        - name: open5gs-upf1-config
          configMap:
            name: open5gs-upf1-config
            defaultMode: 0777
        - name: dev-net-tun
          hostPath:
            path: /dev/net/tun
        - name: tcpdump-persistent-storage
          persistentVolumeClaim:
            claimName: open5gs-tcpdump-pv-claim

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: open5gs-upf-1
  namespace: cemenin
  labels:
    epc-mode: upf1
    prometheus: open5gs-monitor
spec:
  selector:
    matchLabels:
      epc-mode: upf1
  endpoints:
    # - interval: 5s
    #   port: http-open5gs-upf1-9100
    - interval: 5s
      port: http-open5gs-upf1-9090
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: open5gs-upf1-config
  namespace: cemenin
  labels:
    epc-mode: upf1
data:
  upf.yaml: |-
    logger:
        file: /var/log/open5gs/upf.log

    #  <PFCP Server>
    sbi:
      server:
        no_tls: true
      client:
        no_tls: true
    upf:
      pfcp:
        - dev eth0
      gtpu:
        - dev eth0
      metrics:
        - addr: 0.0.0.0
          port: 9090
      subnet:
        - addr: 10.45.0.1/16
          dnn: default
        - addr: 2001:230:cafe::1/48
          dnn: default 
    smf:
      pfcp:
        addr: open5gs-smf
  tun_if.py: |-
    import click
    import subprocess
    import ipaddress

    """
    Usage in command line:
    e.g:
    $ python3 tun_if.py --tun_ifname ogstun --ipv4_range 192.168.100.0/24 --ipv6_range 2001:230:cafe::/48
    """

    def validate_ip_net(ctx, param, value):
      try:
        ip_net = ipaddress.ip_network(value)
        return ip_net
      except ValueError:
        raise click.BadParameter('Value does not represent a valid IPv4/IPv6 range')

    @click.command()
    @click.option('--tun_ifname',
          required=True,
          help='TUN interface name e.g. ogstun')
    @click.option('--ipv4_range',
          required=True,
          callback=validate_ip_net,
          help='UE IPv4 Address range in CIDR format e.g. 192.168.100.0/24')
    @click.option('--ipv6_range',
          required=True,
          callback=validate_ip_net,
          help='UE IPv6 Address range in CIDR format e.g. 2001:230:cafe::/48')
    @click.option('--nat_rule',
          default='yes',
          help='Option specifying whether to add NATing iptables rule or not')
    def start(tun_ifname,
          ipv4_range,
          ipv6_range,
          nat_rule):

      # Get the first IP address in the IP range and netmask prefix length
      first_ipv4_addr = next(ipv4_range.hosts(), None)
      if not first_ipv4_addr:
        raise ValueError('Invalid UE IPv4 range. Only one IP given')
      else:
        first_ipv4_addr = first_ipv4_addr.exploded
      first_ipv6_addr = next(ipv6_range.hosts(), None)
      if not first_ipv6_addr:
        raise ValueError('Invalid UE IPv6 range. Only one IP given')
      else:
        first_ipv6_addr = first_ipv6_addr.exploded

      ipv4_netmask_prefix = ipv4_range.prefixlen
      ipv6_netmask_prefix = ipv6_range.prefixlen

      # Setup the TUN interface, set IP address and setup IPtables
      # if ls /sys/class/net | grep "ogstun" ; then ip link delete ogstun; fi
      execute_bash_cmd('ip tuntap add name ' + tun_ifname + ' mode tun')
      execute_bash_cmd('ip addr add ' + first_ipv4_addr + '/' + str(ipv4_netmask_prefix) + ' dev ' + tun_ifname)
      execute_bash_cmd('ip addr add ' + first_ipv6_addr + '/' + str(ipv6_netmask_prefix) + ' dev ' + tun_ifname)
      execute_bash_cmd('ip link set ' + tun_ifname + ' mtu 1450')
      execute_bash_cmd('ip link set ' + tun_ifname + ' up')
      if nat_rule == 'yes':
        execute_bash_cmd('if ! iptables-save | grep -- \"-A POSTROUTING -s ' + ipv4_range.with_prefixlen + ' ! -o ' + tun_ifname + ' -j MASQUERADE\" ; then ' +
          'iptables -t nat -A POSTROUTING -s ' + ipv4_range.with_prefixlen + ' ! -o ' + tun_ifname + ' -j MASQUERADE; fi')
        execute_bash_cmd('if ! ip6tables-save | grep -- \"-A POSTROUTING -s ' + ipv6_range.with_prefixlen + ' ! -o ' + tun_ifname + ' -j MASQUERADE\" ; then ' +
          'ip6tables -t nat -A POSTROUTING -s ' + ipv6_range.with_prefixlen + ' ! -o ' + tun_ifname + ' -j MASQUERADE; fi')
        execute_bash_cmd('if ! iptables-save | grep -- \"-A INPUT -i ' + tun_ifname + ' -j ACCEPT\" ; then ' +
          'iptables -A INPUT -i ' + tun_ifname + ' -j ACCEPT; fi')
        execute_bash_cmd('if ! ip6tables-save | grep -- \"-A INPUT -i ' + tun_ifname + ' -j ACCEPT\" ; then ' +
          'ip6tables -A INPUT -i ' + tun_ifname + ' -j ACCEPT; fi')

    def execute_bash_cmd(bash_cmd):
      #print("Executing: /bin/bash -c " + bash_cmd)
      return subprocess.run(bash_cmd, stdout=subprocess.PIPE, shell=True)

    if __name__ == '__main__':
      start()
  entrypoint.sh: |-
    #!/bin/bash

    python3 /open5gs/python/tun_if.py --tun_ifname ogstun --ipv4_range 10.45.0.0/16 --ipv6_range 2001:230:cafe::/48

    open5gs-upfd -c /open5gs/config-map/upf.yaml
